{"version":3,"sources":["../../src/contexts/withSlots.tsx","../../src/components/Template.tsx","../../src/contexts/TemplateContext.ts","../../src/components/Slot.tsx","Inner.tsx","App.tsx","index.tsx"],"names":["Component","Template","children","React","TemplateContext","Slot","name","slots","useContext","console","content","item","withSlots","useState","useEffect","components","Array","templates","template","defaultTemplate","setData","slot","value","data","App","ReactDOM","render","document","getElementById"],"mappings":"qIAYGA,E,8CCLUC,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,SACzB,OAAOC,wCAAP,ICDWC,EAAkBD,wBAAxB,MCEME,EAAO,SAAC,GAAD,QAAGC,YAAH,MAAC,UAAD,EAAqBJ,EAArB,EAAqBA,SACjCK,EAAQC,qBAAd,GAEA,OAAID,GACFE,8DAGF,IAAMC,EAAO,OAAGH,QAAH,IAAGA,OAAH,EAAGA,QAAaI,YAAD,OAAUL,IAASK,EAA/C,QAEA,OAAOD,eAAO,IAAPA,UACLP,wCAAiBO,EADZA,MAGLP,wCAHF,ICNaS,GJAZZ,EITW,WACZ,OACE,6BACE,kBAAC,EAAD,qBACA,kBAAC,EAAD,CAAMM,KAAK,WJMf,gBAAGJ,EAAH,EAAGA,SACD,EAAwBW,mBAAxB,uBAAM,EAAN,KAAM,EAAN,KA6BA,OA3BAC,qBAAU,WACR,IAAMC,EAAaC,mBAAqC,CAAxD,GAEMC,EAAYF,EAAA,QACfG,YAAD,aAAc,OAAAA,QAAQ,IAARA,GAAA,UAAAA,EAAA,mCAAyBjB,EAAvC,QAGIkB,EAAkBJ,EAAA,QACrBG,YAAD,aAAc,OAAAA,QAAQ,IAARA,GAAA,UAAAA,EAAA,mCAAyBjB,EAAvC,QAcF,OAXAmB,EAAQ,CACN,CACEd,KADF,UAEEe,KAAMF,IAHH,mBAKFF,EAAA,KAAeC,YAAD,MAAe,CAC9BZ,KAAMY,QADwB,KAE9BG,KAAMH,QAAehB,gBAIlB,WACLkB,SAED,CAzBHN,IA4BE,wBAACV,EAAD,UAA0BkB,MAAOC,GAC9BvB,GAAaG,0BAFlB,SK9BWqB,EARH,WACV,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUH,KAAK,QAAf,YCFNI,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.1d6eef00.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Context, TemplateContext } from './TemplateContext';\nimport { useEffect, useState } from 'react';\nimport { Template } from '../components/Template';\n\nexport interface Props {\n  children: any;\n}\n\ninterface TemplateProps {}\n\nexport const withSlots =\n  (Component: React.FC<TemplateProps>) =>\n  ({ children }: Props) => {\n    const [data, setData] = useState<Context[]>([]);\n\n    useEffect(() => {\n      const components = Array.isArray(children) ? children : [children];\n\n      const templates = components.filter(\n        (template) => template?.type?.name === Template.name,\n      );\n\n      const defaultTemplate = components.filter(\n        (template) => template?.type?.name !== Template.name,\n      );\n\n      setData([\n        {\n          name: 'default',\n          slot: defaultTemplate,\n        },\n        ...templates.map((template) => ({\n          name: template.props.slot,\n          slot: template.props.children,\n        })),\n      ]);\n\n      return () => {\n        setData([]);\n      };\n    }, [children]);\n\n    return (\n      <TemplateContext.Provider value={data}>\n        {Component && <Component />}\n      </TemplateContext.Provider>\n    );\n  };\n","import * as React from 'react';\n\ninterface Props {\n  slot: string;\n  children: React.ReactChild | React.ReactChild[];\n}\n\nexport const Template = ({ children }: Props) => {\n  return <React.Fragment>{children}</React.Fragment>;\n};\n","import * as React from 'react';\n\nexport interface Context {\n  name: string;\n  slot: React.ReactChild | React.ReactChild[] | null;\n}\n\nexport const TemplateContext = React.createContext<Context[] | null>(null);\n","import * as React from 'react';\nimport { useContext } from 'react';\nimport { TemplateContext } from '../contexts/TemplateContext';\n\ninterface Props {\n  name?: string;\n  children?: React.ReactChild | React.ReactChild[];\n}\n\nexport const Slot = ({ name = 'default', children }: Props) => {\n  const slots = useContext(TemplateContext);\n\n  if (slots === null) {\n    console.warn('use `withSlots` for the component with `Slot`');\n  }\n\n  const content = slots?.find((item) => name === item.name);\n\n  return content?.slot ? (\n    <React.Fragment>{content.slot}</React.Fragment>\n  ) : (\n    <React.Fragment>{children}</React.Fragment>\n  );\n};\n","import React from 'react';\nimport { Slot, withSlots } from 'slots';\n\nconst Inner = () => {\n  return (\n    <div>\n      <Slot>default slot</Slot>\n      <Slot name='test' />\n    </div>\n  );\n};\n\nexport default withSlots(Inner);\n","import React from 'react';\nimport { Template } from 'slots';\n\nimport Inner from './Inner';\n\nconst App = () => {\n  return (\n    <Inner>\n      <Template slot='test'>222222</Template>\n    </Inner>\n  );\n};\n\nexport default App;\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}